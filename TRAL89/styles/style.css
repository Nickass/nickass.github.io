/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/**
     * 1. Change the default font family in all browsers (opinionated).
     * 2. Prevent adjustments of font size after orientation changes in IE and iOS.
     */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
     * Remove the margin in all browsers (opinionated).
     */
body {
  margin: 0;
}

/* HTML5 display definitions
       ========================================================================== */
/**
     * Add the correct display in IE <10.
     * Add the correct display in Edge, IE, and Firefox for `details` or `summary`.
     * Add the correct display in IE for `main`.
     */
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
     * Add the correct display in IE <10.
     */
audio,
canvas,
progress,
video {
  display: inline-block;
}

/**
     * Add the correct display and remove excess height in iOS 4-7.
     */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
     * Add the correct vertical alignment in Chrome, Firefox, and Opera.
     */
progress {
  vertical-align: baseline;
}

/**
     * Add the correct display in IE <11, Safari <8, and Firefox <22.
     * 1. Add the correct display in IE.
     */
template,
[hidden] {
  display: none;
}

/* Links
       ========================================================================== */
/**
     * 1. Remove the gray background on active links in IE 10.
     * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
     */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */
}

/**
     * Remove the outline on focused links when they are also active or hovered
     * in all browsers (opinionated).
     */
a:active,
a:hover {
  outline-width: 0;
}

/* Text-level semantics
       ========================================================================== */
/**
     * 1. Remove the bottom border in Firefox <40.
     * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
     */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */
}

/**
     * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
     */
b,
strong {
  font-weight: inherit;
}

/**
     * Add the correct font weight in Chrome, Edge, and Safari.
     */
b,
strong {
  font-weight: bolder;
}

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
code,
kbd,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/**
     * Add the correct font style in Android <4.4.
     */
dfn {
  font-style: italic;
}

/**
     * Correct the font size and margin on `h1` elements within `section` and
     * `article` contexts in Chrome, Firefox, and Safari.
     */
h1 {
  font-size: 2em;
  /* Set 1 unit of vertical rhythm on the top and bottom margins. */
  margin: 0.75em 0;
}

/**
     * Add the correct background and color in IE <10.
     */
mark {
  background-color: #ff0;
  color: #000;
}

/**
     * Add the correct font size in all browsers.
     */
small {
  font-size: 80%;
}

/**
     * Prevent `sub` and `sup` elements from affecting the line height in
     * all browsers.
     */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
       ========================================================================== */
/**
     * Remove the border on images inside links in IE <11.
     */
img {
  border-style: none;
}

/**
     * Hide the overflow in IE.
     */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
       ========================================================================== */
/**
     * Add the correct margin in IE 8.
     */
figure {
  margin: 1.5em 40px;
}

/**
     * 1. Add the correct box sizing in Firefox.
     * 2. Show the overflow in Edge and IE.
     */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

pre {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
       ========================================================================== */
/**
     * Known issues:
     * - By default, Chrome on OS X and Safari on OS X allow very limited styling of
     *   select, unless a border property is set. The default font weight on
     *   optgroup elements cannot safely be changed in Chrome on OSX and Safari on
     *   OS X.
     * - It is recommended that you do not style checkbox and radio inputs as
     *   Firefox's implementation does not respect box-sizing, padding, or width.
     * - Certain font size values applied to number inputs cause the cursor style of
     *   the decrement button to change from default to text.
     * - The search input is not fully stylable by default. In Chrome and Safari on
     *   OSX/iOS you can't control font, padding, border, or background. In Chrome
     *   and Safari on Windows you can't control border properly. It will apply
     *   border-width but will only show a border color (which cannot be controlled)
     *   for the outer 1px of that border. Applying -webkit-appearance: textfield
     *   addresses these issues without removing the benefits of search inputs (e.g.
     *   showing past searches). Safari (but not Chrome) will clip the cancel button
     *   on when it has padding (and textfield appearance).
     */
/**
     * 1. Change font properties to `inherit` in all browsers (opinionated).
     * 2. Remove the margin in Firefox and Safari.
     * 3. Address `font-family` inconsistency between `textarea` and other form in IE 7
     * 4. Improve appearance and consistency with IE 6/7.
     */
button,
input,
optgroup,
select,
textarea {
  font: inherit;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
     * Show the overflow in IE.
     */
button {
  overflow: visible;
}

/**
     * Remove the inheritance of text transform in Edge, Firefox, and IE.
     * 1. Remove the inheritance of text transform in Firefox.
     */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
     * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
     *    controls in Android 4.
     * 2. Correct the inability to style clickable types in iOS and Safari.
     */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
}

button,
[type="button"],
[type="reset"],
[type="submit"] {
  /**
       * Remove the inner border and padding in Firefox.
       */
  /**
       * Restore the focus styles unset by the previous rule.
       */
}

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
     * Show the overflow in Edge.
     */
input {
  overflow: visible;
}

/**
     * 1. Add the correct box sizing in IE <11.
     * 2. Remove the padding in IE <11.
     * 3. Remove excess padding in IE 7.
     *    Known issue: excess padding remains in IE 6.
     */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
     * Correct the cursor style of increment and decrement buttons in Chrome.
     */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
     * 1. Correct the odd appearance in Chrome and Safari.
     * 2. Correct the outline style in Safari.
     */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
       * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.
       */
}

[type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
     * Correct the text style of placeholders in Chrome, Edge, and Safari.
     */
::-webkit-input-placeholder {
  color: inherit;
  opacity: 0.54;
}

/**
     * 1. Correct the inability to style clickable types in iOS and Safari.
     * 2. Change font properties to `inherit` in Safari.
     */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/**
     * Change the border, margin, and padding in all browsers (opinionated).
     */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
     * 1. Correct the text wrapping in Edge and IE.
     * 2. Correct the color inheritance from `fieldset` elements in IE.
     * 3. Remove the padding so developers are not caught out when they zero out
     *    `fieldset` elements in all browsers.
     * 4. Correct alignment displayed oddly in IE 6/7.
     */
legend {
  box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  white-space: normal;
  /* 1 */
  color: inherit;
  /* 2 */
  padding: 0;
  /* 3 */
}

/**
     * Restore the font weight unset by a previous rule.
     */
optgroup {
  font-weight: bold;
}

/**
     * Remove the default vertical scrollbar in IE.
     */
textarea {
  overflow: auto;
}

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@font-face {
  font-family: "Surco";
  font-style: normal;
  font-weight: 900;
  src: url("../fonts/Bw Surco DEMO/bwsurcodemo-black.eot?#iefix") format("embedded-opentype"), url("../fonts/Bw Surco DEMO/bwsurcodemo-black.woff2") format("woff2"), url("../fonts/Bw Surco DEMO/bwsurcodemo-black.woff") format("woff"), url("../fonts/Bw Surco DEMO/bwsurcodemo-black.ttf") format("truetype"), url("../fonts/Bw Surco DEMO/bwsurcodemo-black.svg#Surco") format("svg");
}

@font-face {
  font-family: "Surco";
  font-style: normal;
  font-weight: 700;
  src: url("../fonts/Bw Surco DEMO/bwsurcodemo-bold.eot?#iefix") format("embedded-opentype"), url("../fonts/Bw Surco DEMO/bwsurcodemo-bold.woff2") format("woff2"), url("../fonts/Bw Surco DEMO/bwsurcodemo-bold.woff") format("woff"), url("../fonts/Bw Surco DEMO/bwsurcodemo-bold.ttf") format("truetype"), url("../fonts/Bw Surco DEMO/bwsurcodemo-bold.svg#Surco") format("svg");
}

@font-face {
  font-family: "Surco";
  font-style: normal;
  font-weight: 600;
  src: url("../fonts/Bw Surco DEMO/bwsurcodemo-medium.eot?#iefix") format("embedded-opentype"), url("../fonts/Bw Surco DEMO/bwsurcodemo-medium.woff2") format("woff2"), url("../fonts/Bw Surco DEMO/bwsurcodemo-medium.woff") format("woff"), url("../fonts/Bw Surco DEMO/bwsurcodemo-medium.ttf") format("truetype"), url("../fonts/Bw Surco DEMO/bwsurcodemo-medium.svg#Surco") format("svg");
}

@font-face {
  font-family: "PFText";
  font-style: normal;
  font-weight: 700;
  src: url("../fonts/PFTextCondPro/pfdintextcondpro-bold.eot?#iefix") format("embedded-opentype"), url("../fonts/PFTextCondPro/pfdintextcondpro-bold.woff2") format("woff2"), url("../fonts/PFTextCondPro/pfdintextcondpro-bold.woff") format("woff"), url("../fonts/PFTextCondPro/pfdintextcondpro-bold.ttf") format("truetype"), url("../fonts/PFTextCondPro/pfdintextcondpro-bold.svg#PFText") format("svg");
}

@font-face {
  font-family: "PFText";
  font-style: normal;
  font-weight: 400;
  src: url("../fonts/PFTextCondPro/pfdintextcondpro-regular.eot?#iefix") format("embedded-opentype"), url("../fonts/PFTextCondPro/pfdintextcondpro-regular.woff2") format("woff2"), url("../fonts/PFTextCondPro/pfdintextcondpro-regular.woff") format("woff"), url("../fonts/PFTextCondPro/pfdintextcondpro-regular.ttf") format("truetype"), url("../fonts/PFTextCondPro/pfdintextcondpro-regular.svg#PFText") format("svg");
}

@font-face {
  font-family: "PFSquare";
  font-style: italic;
  font-weight: 400;
  src: url("../fonts/PFSquareSansPro/pfsquaresanspro-italic.eot?#iefix") format("embedded-opentype"), url("../fonts/PFSquareSansPro/pfsquaresanspro-italic.woff2") format("woff2"), url("../fonts/PFSquareSansPro/pfsquaresanspro-italic.woff") format("woff"), url("../fonts/PFSquareSansPro/pfsquaresanspro-italic.ttf") format("truetype"), url("../fonts/PFSquareSansPro/pfsquaresanspro-italic.svg#PFSquare") format("svg");
}

@font-face {
  font-family: "PFSquare";
  font-style: italic;
  font-weight: 600;
  src: url("../fonts/PFSquareSansPro/pfsquaresanspro-meditalic.eot?#iefix") format("embedded-opentype"), url("../fonts/PFSquareSansPro/pfsquaresanspro-meditalic.woff2") format("woff2"), url("../fonts/PFSquareSansPro/pfsquaresanspro-meditalic.woff") format("woff"), url("../fonts/PFSquareSansPro/pfsquaresanspro-meditalic.ttf") format("truetype"), url("../fonts/PFSquareSansPro/pfsquaresanspro-meditalic.svg#PFSquare") format("svg");
}

@font-face {
  font-family: "PFSquare";
  font-style: italic;
  font-weight: 200;
  src: url("../fonts/PFSquareSansPro/pfsquaresanspro-lightitalic.eot?#iefix") format("embedded-opentype"), url("../fonts/PFSquareSansPro/pfsquaresanspro-lightitalic.woff2") format("woff2"), url("../fonts/PFSquareSansPro/pfsquaresanspro-lightitalic.woff") format("woff"), url("../fonts/PFSquareSansPro/pfsquaresanspro-lightitalic.ttf") format("truetype"), url("../fonts/PFSquareSansPro/pfsquaresanspro-lightitalic.svg#PFSquare") format("svg");
}

@font-face {
  font-family: "PFSquare";
  font-style: normal;
  font-weight: 400;
  src: url("../fonts/PFSquareSansPro/pfsquaresanspro-regular.eot?#iefix") format("embedded-opentype"), url("../fonts/PFSquareSansPro/pfsquaresanspro-regular.woff2") format("woff2"), url("../fonts/PFSquareSansPro/pfsquaresanspro-regular.woff") format("woff"), url("../fonts/PFSquareSansPro/pfsquaresanspro-regular.ttf") format("truetype"), url("../fonts/PFSquareSansPro/pfsquaresanspro-regular.svg#PFSquare") format("svg");
}

@font-face {
  font-family: "PFSquare";
  font-style: normal;
  font-weight: 600;
  src: url("../fonts/PFSquareSansPro/pfsquaresanspro-medium.eot?#iefix") format("embedded-opentype"), url("../fonts/PFSquareSansPro/pfsquaresanspro-medium.woff2") format("woff2"), url("../fonts/PFSquareSansPro/pfsquaresanspro-medium.woff") format("woff"), url("../fonts/PFSquareSansPro/pfsquaresanspro-medium.ttf") format("truetype"), url("../fonts/PFSquareSansPro/pfsquaresanspro-medium.svg#PFSquare") format("svg");
}

@font-face {
  font-family: "PFSquare";
  font-style: normal;
  font-weight: 700;
  src: url("../fonts/PFSquareSansPro/pfsquaresanspro-bold.eot?#iefix") format("embedded-opentype"), url("../fonts/PFSquareSansPro/pfsquaresanspro-bold.woff2") format("woff2"), url("../fonts/PFSquareSansPro/pfsquaresanspro-bold.woff") format("woff"), url("../fonts/PFSquareSansPro/pfsquaresanspro-bold.ttf") format("truetype"), url("../fonts/PFSquareSansPro/pfsquaresanspro-bold.svg#PFSquare") format("svg");
}

body {
  background: #fff;
  font-size: 18px;
  font-family: "PFSquare", "Arial", sans-serif;
  color: #313131;
}

@media (max-width: 774px) {
  body {
    font-size: 16px;
  }
}

* {
  box-sizing: border-box;
}

h1, .h1 {
  font-size: 3.3333333333em;
  line-height: 1.1111111111em;
  text-transform: uppercase;
}

h2, .h2 {
  font-size: 2.6666666667em;
  line-height: 1.1111111111em;
  font-family: "Surco", "Tahoma", sans-serif;
  text-transform: uppercase;
  font-weight: 900;
}

h3, .h3 {
  font-size: 2em;
  line-height: 1.6666666667em;
  font-family: "Surco", "Tahoma", sans-serif;
  text-transform: uppercase;
  font-weight: 600;
}

h4, .h4 {
  font-size: 1.6666666667em;
}

h5, .h5 {
  font-size: 1.3333333333em;
  font-weight: 600;
}

h6, .h6 {
  font-size: 1.1111111111em;
  font-family: "Surco", "Tahoma", sans-serif;
  font-weight: normal;
}

a {
  color: inherit;
  text-decoration: none;
  cursor: pointer;
}

a:hover {
  text-decoration: underline;
}

img {
  max-height: 100%;
  max-width: 100%;
  height: auto;
}

strong {
  font-weight: 600;
}

blockquote {
  margin: 75px;
  quotes: "\201c" "\201c";
  text-align: center;
  font-size: 1.6666666667em;
  line-height: 1.6666666667em;
  font-style: italic;
  font-weight: 200;
}

blockquote:before {
  display: block;
  content: open-quote;
  font-size: 7em;
}

@media (max-width: 774px) {
  blockquote {
    font-size: 24px;
    line-height: 36px;
    margin: 45px;
  }
}

.wrapper {
  overflow: hidden;
}

.container {
  box-sizing: border-box;
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
}

.container:before, .container:after {
  display: table;
  content: " ";
}

.container:after {
  clear: both;
}

@media (max-width: 774px) {
  .container {
    padding: 0 10px;
  }
}

.reset, .srv_description p, .srv_description h1, .srv_description h2, .srv_description h3, .srv_description h4, .srv_description h5, .srv_description h6, .points ul {
  margin: 0;
  padding: 0;
  list-style-type: none;
}

.ta-center {
  text-align: center;
}

.big-text {
  font-size: 1.3333333333em;
}

.section {
  position: relative;
  padding-bottom: 110px;
  background-position: 80% center;
  background-repeat: no-repeat;
}

@media (max-width: 774px) {
  .section {
    padding-bottom: 40px;
  }
  .section:before {
    display: none;
  }
}

.section:before {
  position: absolute;
  top: -108px;
  height: 110px;
  width: 100%;
  content: '';
}

.section__title {
  text-align: center;
}

.blue-block {
  background-color: #1C77D9;
  color: #fff;
}

.blue-block:before {
  background-image: -webkit-linear-gradient(top left, transparent 0%, transparent 49.5%, #1C77D9 50.5%, #1C77D9 100%);
  background-image: linear-gradient(to bottom right, transparent 0%, transparent 49.5%, #1C77D9 50.5%, #1C77D9 100%);
}

.white-block {
  background-color: #fff;
  color: #313131;
}

.white-block:before {
  background-image: -webkit-linear-gradient(top left, transparent 0%, transparent 49.5%, #fff 50.5%, #fff 100%);
  background-image: linear-gradient(to bottom right, transparent 0%, transparent 49.5%, #fff 50.5%, #fff 100%);
}

.dark-block {
  background-color: #313131;
  color: #fff;
}

.dark-block:before {
  background-image: -webkit-linear-gradient(top left, transparent 0%, transparent 49.5%, #313131 50.5%, #313131 100%);
  background-image: linear-gradient(to bottom right, transparent 0%, transparent 49.5%, #313131 50.5%, #313131 100%);
}

.gallery:before, .gallery:after {
  display: table;
  content: " ";
}

.gallery:after {
  clear: both;
}

.gallery-item {
  margin: 0 0 10px;
}

@media (max-width: 774px) {
  .gallery-columns-4 .gallery-item {
    box-sizing: border-box;
    width: 48.5714285714%;
    float: left;
  }
  .gallery-columns-4 .gallery-item:nth-child(2n + 1) {
    margin-left: 0;
    margin-right: -100%;
    clear: both;
    margin-left: 0;
  }
  .gallery-columns-4 .gallery-item:nth-child(2n + 2) {
    margin-left: 51.4285714286%;
    margin-right: -100%;
    clear: none;
  }
}

@media (min-width: 774px) {
  .gallery-columns-4 .gallery-item {
    box-sizing: border-box;
    width: 22.8571428571%;
    float: left;
  }
  .gallery-columns-4 .gallery-item:nth-child(4n + 1) {
    margin-left: 0;
    margin-right: -100%;
    clear: both;
    margin-left: 0;
  }
  .gallery-columns-4 .gallery-item:nth-child(4n + 2) {
    margin-left: 25.7142857143%;
    margin-right: -100%;
    clear: none;
  }
  .gallery-columns-4 .gallery-item:nth-child(4n + 3) {
    margin-left: 51.4285714286%;
    margin-right: -100%;
    clear: none;
  }
  .gallery-columns-4 .gallery-item:nth-child(4n + 4) {
    margin-left: 77.1428571429%;
    margin-right: -100%;
    clear: none;
  }
}

@media (max-width: 774px) {
  .gallery-columns-2 .gallery-item {
    box-sizing: border-box;
    width: 100%;
    float: left;
  }
  .gallery-columns-2 .gallery-item:nth-child(1n + 1) {
    margin-left: 0;
    margin-right: -100%;
    clear: none;
  }
}

@media (min-width: 774px) {
  .gallery-columns-2 .gallery-item {
    box-sizing: border-box;
    width: 48.5714285714%;
    float: left;
  }
  .gallery-columns-2 .gallery-item:nth-child(2n + 1) {
    margin-left: 0;
    margin-right: -100%;
    clear: both;
    margin-left: 0;
  }
  .gallery-columns-2 .gallery-item:nth-child(2n + 2) {
    margin-left: 51.4285714286%;
    margin-right: -100%;
    clear: none;
  }
}

.h_top {
  display: table;
  width: 100%;
  table-layout: auto;
  padding: 20px 0;
  color: #616161;
  line-height: 18px;
}

@media (max-width: 774px) {
  .h_top {
    display: block;
    padding: 0;
  }
}

.h_top__item {
  display: table-cell;
  vertical-align: middle;
  text-align: center;
  width: 33.33333%;
}

.h_top__item:first-child {
  text-align: left;
}

.h_top__item:last-child {
  text-align: right;
}

@media (max-width: 774px) {
  .h_top__item {
    display: block;
    width: 100%;
    margin: 10px 0;
    text-align: center;
  }
  .h_top__item:first-child {
    text-align: center;
  }
  .h_top__item:last-child {
    text-align: center;
  }
}

.h_tel {
  display: block;
  font-family: "Surco", "Tahoma", sans-serif;
  font-weight: 600;
  font-size: 20px;
  line-height: 20px;
  color: #1C77D9;
}

.h_tel__short {
  color: #313131;
  font-weight: 900;
  font-size: 30.00006px;
}

.h_tel:hover {
  color: #3e99fb;
  text-decoration: none;
}

.h_tel:hover .h_tel__short {
  color: #646453;
}

.h_email {
  display: block;
  color: #868686;
  line-height: 20px;
}

.h_email:hover {
  color: #a8a8a8;
  text-decoration: none;
}

.nav-menu {
  display: table;
  table-layout: auto;
  position: relative;
  z-index: 300;
  margin-bottom: -20px;
  white-space: nowrap;
  background-color: #1C77D9;
  background-image: -webkit-linear-gradient(top, #269aee, #1C77D9);
  background-image: linear-gradient(to bottom, #269aee, #1C77D9);
  box-shadow: inset 0px -2px rgba(0, 0, 0, 0.11);
  border-radius: 3px;
}

@media (max-width: 774px) {
  .nav-menu {
    display: block;
    margin-bottom: 0;
  }
  .nav-menu:before, .nav-menu:after {
    display: table;
    content: " ";
  }
  .nav-menu:after {
    clear: both;
  }
}

.nav-menu li {
  display: table-cell;
  vertical-align: middle;
  text-align: center;
  width: 1%;
  border-left: 1px solid #1670df;
}

@media (max-width: 774px) {
  .nav-menu li {
    display: none;
    width: 100%;
    padding-right: 10px;
    border-top: 1px solid #1670df;
    text-align: right;
  }
  .toggled .nav-menu li {
    display: block;
  }
}

.nav-menu li:first-child {
  border-left: none;
}

.nav-menu a {
  display: inline-block;
  padding: 10.5px 0;
  width: 100%;
  color: #fff;
  font-size: 15px;
  font-weight: 700;
  text-shadow: 0px -1px 0px rgba(0, 0, 0, 0.23);
  text-transform: uppercase;
}

.nav-menu a:hover, .nav-menu a.active {
  color: #cccccc;
  text-decoration: none;
}

.toggle-button {
  float: right;
  width: 40px;
  height: 100%;
  box-shadow: 0px 0px 3px 1px #333;
  cursor: pointer;
  border: 0;
  border-radius: 3px;
  -webkit-transition: all 200ms;
  transition: all 200ms;
}

.toggle-button:focus {
  outline: none;
}

.toggle-button:hover {
  box-shadow: 0px 0px 5px 2px #333;
  -webkit-transform: scale(1.03);
          transform: scale(1.03);
}

.toggle-button:active {
  box-shadow: 0px 0px 3px 1px #333;
}

.toggle-button span {
  display: block;
  margin: 5px 0;
  border-bottom: 2px solid #1C77D9;
}

.container_toggle-button {
  display: none;
  padding: 8px;
  background: #1C77D9;
}

.container_toggle-button:before, .container_toggle-button:after {
  display: table;
  content: " ";
}

.container_toggle-button:after {
  clear: both;
}

@media (max-width: 774px) {
  .container_toggle-button {
    display: block;
  }
}

.main {
  padding-bottom: 110px;
  padding-top: 50px;
  background: #f3f3f3 url("../images/bg-main.png") center no-repeat;
}

@media (max-width: 774px) {
  .main {
    padding-bottom: 20px;
  }
}

.m_title {
  position: relative;
  z-index: 10;
  display: inline-block;
  padding: 30px 25px 0;
  margin: 0;
  background: rgba(255, 255, 255, 0.88);
  text-transform: uppercase;
  max-width: 70%;
}

@media (max-width: 774px) {
  .m_title {
    display: block;
    text-align: center;
    padding: 0;
    max-width: 100%;
  }
}

.m_title-container {
  margin-bottom: 30px;
  position: relative;
  min-height: 260px;
}

.m_title__PS {
  display: block;
  vertical-align: top;
  font-size: 30.00006px;
  color: #1C77D9;
  line-height: 40px;
}

.m_image {
  position: absolute;
  z-index: 5;
  right: -35px;
  top: 0px;
  max-height: 340px;
  max-width: 500px;
}

@media (max-width: 774px) {
  .m_image {
    display: none;
  }
}

.m_card {
  position: relative;
  width: 100%;
  margin: 0 auto;
  padding: 7px;
  background: #1C77D9;
  display: block;
}

@media (min-width: 774px) {
  .m_card {
    min-width: 330px;
    max-width: 40%;
    float: left;
  }
  .m_card:nth-child(even) {
    float: right;
  }
}

.m_card__inner {
  display: table;
  border: 2px solid #fff;
  padding: 10px 20px;
  min-height: 114px;
  width: 100%;
}

.m_card__item {
  display: table-cell;
  min-width: 85px;
  vertical-align: middle;
  padding-left: 5px;
  color: #fff;
  font-size: 24.00012px;
  font-family: "PFSquare", "Arial", sans-serif;
}

.service {
  background-image: url("../images/bg-service.png");
  background-position: center center;
  background-repeat: no-repeat;
}

.srv_list:before, .srv_list:after {
  display: table;
  content: " ";
}

.srv_list:after {
  clear: both;
}

.srv_list__item {
  box-sizing: border-box;
  width: 50%;
  float: left;
  padding-bottom: 30px;
}

@media (max-width: 774px) {
  .srv_list__item {
    box-sizing: border-box;
    width: 100%;
    float: left;
    margin-left: 0;
    margin-right: 0;
  }
}

.srv_link {
  display: table;
}

.srv_link:hover {
  text-decoration: none;
}

.srv_link:hover .srv_icon {
  box-shadow: 0px 0px 3px #313131;
}

.srv_link:hover .srv_description {
  color: #868686;
}

.srv_cell {
  display: table-cell;
  vertical-align: middle;
}

.srv_icon {
  position: relative;
  width: 100px;
  height: 100px;
  line-height: 100px;
  text-align: center;
  overflow: hidden;
  background: #1C77D9;
}

.srv_icon img {
  vertical-align: middle;
  max-width: 60px;
  max-height: 60px;
  font-size: 10px;
}

.srv_icon:after {
  content: '';
  position: absolute;
  width: 82px;
  height: 82px;
  top: 7px;
  left: 7px;
  pointer-events: none;
  border: 2px solid #1365be;
}

.srv_description {
  padding-left: 30px;
  line-height: 20px;
  font-family: "PFSquare", "Arial", sans-serif;
  color: #5e5e5e;
  font-size: 16px;
}

.price {
  background-image: url("../images/bg-price.png");
  background-position: 5% bottom;
  background-repeat: no-repeat;
}

.price_block {
  margin: 35px 0;
}

.price_block:before, .price_block:after {
  display: table;
  content: " ";
}

.price_block:after {
  clear: both;
}

.price_block__basic {
  width: 61.4%;
  float: left;
  border: 7px solid #fff;
  padding: 5px 15px;
}

@media (max-width: 774px) {
  .price_block__basic {
    width: 100%;
  }
}

.price_block__basic p {
  font-size: 1.3333333333em;
}

.price_block__minimal {
  width: 38.6%;
  float: left;
  font-size: 18px;
}

@media (max-width: 774px) {
  .price_block__minimal {
    width: 100%;
    background: #fff;
    color: #1C77D9;
  }
}

.price_block__minimal .special-title {
  margin: 0;
  background: #fff;
  color: #035ec0;
  padding: 10px;
  text-transform: uppercase;
  font-weight: bold;
}

.price_block__minimal p {
  padding: 0 15px;
  font-size: 18px;
}

.why-we {
  color: #707070;
  background: #fff url("../images/bg-why-we.png") center no-repeat;
}

.why-we:before {
  background-image: -webkit-linear-gradient(top left, transparent 0%, transparent 49.5%, #fff 50.5%, #fff 100%);
  background-image: linear-gradient(to bottom right, transparent 0%, transparent 49.5%, #fff 50.5%, #fff 100%);
}

.why-we .section_title {
  color: #494949;
}

.why-we strong, .why-we .strong {
  color: #1C77D9;
}

.why-we blockquote, .why-we .blockquote {
  color: #404040;
}

.why-we blockquote:before, .why-we .blockquote:before {
  color: #1C77D9;
}

.how-shipping {
  color: #707070;
}

.how-shipping .section_title {
  color: #494949;
}

.works .gallery-item {
  background: #fff;
  -webkit-filter: grayscale(100%);
          filter: grayscale(100%);
}

.works .gallery-item:hover {
  -webkit-filter: grayscale(0%);
          filter: grayscale(0%);
}

@media (min-width: 774px) {
  .works .gallery-columns-4 .gallery-item {
    box-sizing: border-box;
    width: 24.1758241758%;
    float: left;
  }
  .works .gallery-columns-4 .gallery-item:nth-child(4n + 1) {
    margin-left: 0;
    margin-right: -100%;
    clear: both;
    margin-left: 0;
  }
  .works .gallery-columns-4 .gallery-item:nth-child(4n + 2) {
    margin-left: 25.2747252747%;
    margin-right: -100%;
    clear: none;
  }
  .works .gallery-columns-4 .gallery-item:nth-child(4n + 3) {
    margin-left: 50.5494505495%;
    margin-right: -100%;
    clear: none;
  }
  .works .gallery-columns-4 .gallery-item:nth-child(4n + 4) {
    margin-left: 75.8241758242%;
    margin-right: -100%;
    clear: none;
  }
}

@media (max-width: 774px) {
  .works .gallery-columns-4 .gallery-item {
    box-sizing: border-box;
    width: 49.4505494505%;
    float: left;
  }
  .works .gallery-columns-4 .gallery-item:nth-child(2n + 1) {
    margin-left: 0;
    margin-right: -100%;
    clear: both;
    margin-left: 0;
  }
  .works .gallery-columns-4 .gallery-item:nth-child(2n + 2) {
    margin-left: 50.5494505495%;
    margin-right: -100%;
    clear: none;
  }
}

.works .gallery-caption {
  display: block;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  width: 100%;
  min-height: 60px;
  text-transform: uppercase;
  text-align: center;
  font-family: "Surco", "Tahoma", sans-serif;
  font-size: 16px;
  font-weight: bold;
  color: #000;
}

.points {
  color: #494949;
  background: #fff url("../images/bg-points.png") center no-repeat;
}

.points:before {
  background-image: -webkit-linear-gradient(top left, transparent 0%, transparent 49.5%, #fff 50.5%, #fff 100%);
  background-image: linear-gradient(to bottom right, transparent 0%, transparent 49.5%, #fff 50.5%, #fff 100%);
}

.points-layout {
  padding: 0 40px;
}

@media (min-width: 774px) {
  .points-layout {
    box-sizing: border-box;
    width: 50%;
    float: left;
  }
}

.points li {
  padding: 5px 0;
}

.points li:before {
  content: '';
  height: 1em;
  width: 20px;
  padding-right: 15px;
  display: inline-block;
  vertical-align: middle;
  background: transparent url("../images/point.png") no-repeat;
}

.thanks {
  color: #fff;
  background: #494949;
}

.thanks:before {
  background-image: -webkit-linear-gradient(top left, transparent 0%, transparent 49.5%, #494949 50.5%, #494949 100%);
  background-image: linear-gradient(to bottom right, transparent 0%, transparent 49.5%, #494949 50.5%, #494949 100%);
}

.thanks .gallery-item {
  position: relative;
  display: block;
  background: #fff;
  -webkit-transform: rotate(-5deg);
          transform: rotate(-5deg);
}

.thanks .gallery-item:nth-child(even) {
  -webkit-transform: rotate(5deg);
          transform: rotate(5deg);
}

.thanks .gallery-item:nth-child(even) .gallery-icon {
  -webkit-transform: rotate(-5deg);
          transform: rotate(-5deg);
}

.thanks .gallery-item:nth-child(even) .gallery-icon:hover {
  -webkit-transform: rotate(-5deg) scale(1.03);
          transform: rotate(-5deg) scale(1.03);
}

.thanks .gallery-item .gallery-icon {
  -webkit-transform: rotate(5deg);
          transform: rotate(5deg);
  box-shadow: -5px 5px 5px rgba(0, 0, 0, 0.75);
  -webkit-transition: all 200ms linear;
  transition: all 200ms linear;
}

.thanks .gallery-item .gallery-icon a:focus {
  outline: none;
}

.thanks .gallery-item .gallery-icon:hover {
  -webkit-transform: rotate(5deg) scale(1.03);
          transform: rotate(5deg) scale(1.03);
  box-shadow: -8px 8px 10px rgba(0, 0, 0, 0.75);
}

.contacts {
  background-image: url("../images/bg-point.png");
  background-position: 10% 0%;
  background-repeat: no-repeat;
}

.contacts li {
  margin: 20px 0;
}

.contacts_list {
  box-sizing: border-box;
  width: 50%;
  float: left;
  padding: 0 40px;
}

@media (max-width: 774px) {
  .contacts_list {
    box-sizing: border-box;
    width: 100%;
    float: left;
    margin-left: 0;
    margin-right: 0;
  }
}

.contacts_download {
  position: relative;
  min-height: 55px;
  font-weight: bold;
  line-height: 20px;
}

.contacts_download:before {
  background-image: url(../images/sprite.png);
  background-position: 0px 0px;
  width: 55px;
  height: 55px;
  position: absolute;
  top: 0%;
  left: 0%;
  content: '';
  display: block;
}

.contacts_download a {
  display: inline-block;
  text-decoration: underline;
  margin-left: 75px;
}

.contacts_download a:hover {
  text-decoration: none;
}

.faq_list {
  counter-reset: item;
  color: #9c9c9c;
}

.faq_list__item .title {
  margin: 10px 0;
  color: #1C77D9;
}

.faq_list__item .title:before {
  content: counter(item) ". ";
  counter-increment: item;
}

.footer {
  color: #fff;
  background: #1C77D9 url("../images/bg-telephone.png") 80% center no-repeat;
}

.footer:before {
  background-image: -webkit-linear-gradient(top left, transparent 0%, transparent 49.5%, #1C77D9 50.5%, #1C77D9 100%);
  background-image: linear-gradient(to bottom right, transparent 0%, transparent 49.5%, #1C77D9 50.5%, #1C77D9 100%);
}

.footer_tel {
  display: block;
  text-align: center;
  font-size: 36px;
  font-weight: bold;
}

/*# sourceMappingURL=data:application/json;base64, */
